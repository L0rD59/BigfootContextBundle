<?php

namespace Bigfoot\Bundle\ContextBundle\Entity;

use Bigfoot\Bundle\ContextBundle\Service\ContextService;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;

/**
 * ContextRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContextRepository extends EntityRepository
{
    /** @var SessionInterface */
    public $session;

    /** @var ContextService */
    public $context;

    /**
     * @param SessionInterface $session
     */
    public function setSession(SessionInterface $session)
    {
        $this->session = $session;
    }

    /**
     * @param ContextService $context
     */
    public function setContextService(ContextService $context)
    {
        $this->context = $context;
    }

    /**
     * @param $class
     * @param array $definedContext
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function createContextQueryBuilder($class, $definedContext = array())
    {
        $contextService = $this->context;

        $contextValues = array();
        if ($this->session && ($chosenContext = $this->session->get('bigfoot/context/chosen_contexts'))) {
            $contextValues = $chosenContext;
        } elseif (count($definedContext)) {
            $contextValues = $definedContext;
        } elseif ($this->session) {
            $contextValues = $this->session->get('bigfoot/context/allowed_contexts');
        }

        $queryBuilder = $this->getEntityManager()->getRepository($class)->createQueryBuilder('e');
        $regex        = array();
        $orX          = array();

        $entityContexts = $contextService->getEntityContexts($class);
        if (count($entityContexts)) {
            $queryBuilder = $queryBuilder
                ->leftJoin('BigfootContextBundle:Context', 'c', 'WITH',
                    $queryBuilder->expr()->andX(
                        $queryBuilder->expr()->eq('e.id', 'c.entityId'),
                        $queryBuilder->expr()->eq('c.entityClass', "'$class'")
                    )
                );

            foreach ($entityContexts as $context) {
                if (isset($contextValues[$context])) {
                    $values = $contextValues[$context];
                } else {
                    $values = array($contextService->get($context));
                }

                foreach ($values as $value) {
                    $regex[] = new Expr\Comparison('REGEXP(c.contextValues, \'[a-z0-9:;\{}\"]*'.$context->value.'[a-z0-9:;\{\"]*'.$value.'.*\}\')', Expr\Comparison::EQ, 1);
                }

                $regex[] = new Expr\Comparison('REGEXP(c.contextValues, \'[a-z0-9:;\{}\"]*'.$context->value.'[a-z0-9:;\"]*\{\}\')', Expr\Comparison::EQ, 1);
                $regex[] = $queryBuilder->expr()->isNull('c.contextValues');

                $orX[]   = new Expr\Orx($regex);
            }

            $andX = new Expr\AndX($orX);

            $queryBuilder->where('('.$andX.')');
        }

        return $queryBuilder;
    }

    public function findOneByEntityIdEntityClass($entityId, $entityClass)
    {
        return $this
            ->createQueryBuilder('c')
            ->where('c.entityId = :entityId')
            ->andWhere('c.entityClass = :entityClass')
            ->setParameter('entityId', $entityId)
            ->setParameter('entityClass', $entityClass)
            ->getQuery()
            ->getOneOrNullResult();
    }
}
